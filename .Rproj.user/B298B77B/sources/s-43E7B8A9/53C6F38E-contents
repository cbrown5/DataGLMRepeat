---
title: "with_groups"
author: "CJ Brown"
date: "13 February 2020"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{with_groups function}
  %\VignetteEngine{knitr::rmarkdown}
  \usepackage[utf8]{inputenc}
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
```

## Examples of with_groups 

The `with_groups` was designed to streamline fitting multiple models to a single dataframe. For instance, maybe you want to fit one model per region, or you want to iteratively fit models to randomized data.  

`with_groups` iterates across groups in a dataframe to evaluate an expression. 

One way to do this is using lapply or purrr::pmap, but they require you write functions. Often we want to write one off scripts for fitting models. R expressions are a convenient way to do that. 

## Fitting multiple models 

First create some data with a poisson distributed response variable y: 

```{r}
library(dplyr)
library(DataGLMRepeat)
dat <- tibble(
  grp1 = sample(c(1, 2, 3), 100, replace = TRUE), 
  grp2 = sample(letters[1:3], 100, replace = TRUE), 
  x = (1:100)/100, 
  y = rpois(100, lambda = exp(grp1 + x*2)))
```

Now fit a glm by groups. The group names are available within the expression simply by their name (e.g. here `grp`)

```{r}
gout <- dat %>% 
  group_by(grp1, grp2) %>%
  with_groups(., {
    tibble(glmfit = 
      list(glm(y ~ x, family = "poisson")))
  }) %>% 
  bind_rows(.id = "group")
```

Example of extracting slopes with `purrr::map()` : 

```{r}
library(purrr)
gout$glmfit %>%
  map(~.x$coefficients[2]) %>%
  unlist()
```


