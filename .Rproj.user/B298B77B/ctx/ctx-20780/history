dsplots <- dout %>%
group_by(ID) %>%
with_groups({
dsdf <- bind_cols(dat,
fitted = predict(model[[1]]),
#Note Mean estimate is in col 1 of
#brms predict
resid = ds_resids(dat$y,
predict(model[[1]]),
plot = FALSE))
g1 <- ggplot(dsdf) +
aes(x = fitted, y = resid, color = x1) +
geom_point()
#save result
# ggsave(g1, file = paste0("model-", ID, ".png"))
list(g1)
})
dsplots[[1]]
g1 <- ggplot(dsdf) +
aes(x = fitted, y = resid, color = x1) +
geom_point(form)
dsplots <- dout %>%
group_by(ID) %>%
with_groups({
dsdf <- bind_cols(dat,
fitted = predict(model[[1]]),
#Note Mean estimate is in col 1 of
#brms predict
resid = ds_resids(dat$y,
predict(model[[1]]),
plot = FALSE))
g1 <- ggplot(dsdf) +
aes(x = fitted, y = resid, color = x1) +
geom_point(form)
#save result
# ggsave(g1, file = paste0("model-", ID, ".png"))
list(g1)
})
dsplots <- dout %>%
group_by(ID) %>%
with_groups({
dsdf <- bind_cols(dat,
fitted = predict(model[[1]]),
#Note Mean estimate is in col 1 of
#brms predict
resid = ds_resids(dat$y,
predict(model[[1]]),
plot = FALSE))
g1 <- ggplot(dsdf) +
aes(x = fitted, y = resid, color = x1) +
geom_point()  +
ggtitle(form)
#save result
# ggsave(g1, file = paste0("model-", ID, ".png"))
list(g1)
})
dsplots[[1]]
dsplots <- dout %>%
group_by(ID) %>%
with_groups({
dsdf <- bind_cols(dat,
fitted = predict(model[[1]]),
#Note Mean estimate is in col 1 of
#brms predict
resid = ds_resids(dat$y,
predict(model[[1]]),
plot = FALSE))
g1 <- ggplot(dsdf) +
aes(x = fitted, y = resid, color = x2) +
geom_point()  +
ggtitle(form)
#save result
# ggsave(g1, file = paste0("model-", ID, ".png"))
list(g1)
})
dsplots[[1]]
dsdf <- bind_cols(dat,
fitted = predict(model[[1]]),
#Note Mean estimate is in col 1 of
#brms predict
resid = ds_resids(dat$y,
predict(model[[1]]),
plot = FALSE))
dsplots <- dout %>%
group_by(ID) %>%
with_groups({
dsdf <- bind_cols(dat,
fitted = predict(model[[1]]),
#Note Mean estimate is in col 1 of
#brms predict
resid = ds_resids(dat$y,
predict(model[[1]]),
plot = FALSE))
g1 <- ggplot(dsdf) +
aes(x = fitted, y = resid, color = x2) +
geom_point()  +
ggtitle(form)
#save result
# ggsave(g1, file = paste0("model-", ID, ".png"))
list(g1)
})
dsplots[[1]]
#Use with_groups on ID to loop over every row
# of dfsim
dout <- dfsim %>%
group_by(ID) %>%
with_groups({
m1 <- brm(formula(form), data = dat,
family = family,
prior = prior_string(prior,
class = "b"))
# m1 <- glm(formula(form), data = dat,
# family = "poisson")
tibble(model = list(m1)) #save as list object in named tibble
}) %>%
bind_rows() %>%
bind_cols(dfsim, .)
dout
dout$model[[1]]
predict(dout$model[[1]])
dsplots <- dout %>%
group_by(ID) %>%
with_groups({
dsdf <- bind_cols(dat,
fitted = predict(model[[1]])[,1],
#Note Mean estimate is in col 1 of
#brms predict
resid = ds_resids(dat$y,
predict(model[[1]])[,1],
plot = FALSE))
g1 <- ggplot(dsdf) +
aes(x = fitted, y = resid, color = x2) +
geom_point()  +
ggtitle(form)
#save result
# ggsave(g1, file = paste0("model-", ID, ".png"))
list(g1)
})
dsplots[[1]]
?paste
?paste
?paste
#' Paste with a dash
#'
#' @Usage paste_(...)
#'
#' @param ... one or more R objects to convert to characters
#'
#' @return A string
#' @Details shortcut for paste("a", "b", sep ="-")
#'
#' @author Christopher J. Brown
#' @rdname paste_
#' @export
paste_ <- function(...){
paste(..., sep = "-")
}
dsplots <- dout %>%
group_by(ID) %>%
with_groups({
dsdf <- bind_cols(dat,
fitted = predict(model[[1]])[,1],
#Note Mean estimate is in col 1 of
#brms predict
resid = ds_resids(dat$y,
predict(model[[1]])[,1],
plot = FALSE))
g1 <- ggplot(dsdf) +
aes(x = fitted, y = resid, color = x2) +
geom_point()  +
ggtitle(paste_(form, family, prior))
#save plot to file
# ggsave(g1, file = paste0("figures/model-", ID, ".png"))
list(g1)
})
dsplots[[1]]
#' Paste with a dash
#'
#' @Usage paste_(...)
#'
#' @param ... one or more R objects to convert to characters
#'
#' @return A string
#' @Details shortcut for paste("a", "b", sep ="_")
#'
#' @author Christopher J. Brown
#' @rdname paste_
#' @export
paste_ <- function(...){
paste(..., sep = "_")
}
dsplots <- dout %>%
group_by(ID) %>%
with_groups({
dsdf <- bind_cols(dat,
fitted = predict(model[[1]])[,1],
#Note Mean estimate is in col 1 of
#brms predict
resid = ds_resids(dat$y,
predict(model[[1]])[,1],
plot = FALSE))
g1 <- ggplot(dsdf) +
aes(x = fitted, y = resid, color = x2) +
geom_point()  +
ggtitle(paste_(form, family, prior))
#save plot to file
# ggsave(g1, file = paste0("figures/model-", ID, ".png"))
list(g1)
})
dsplots[[1]]
dsplots[[3]]
coef(dout$model[[1]])
fixef(dout$model[[1]])
dout$model %>%
map(~fixef(.x[[1]]))
library(purrr)
dout$model %>%
map(~fixef(.x[[1]]))
dout$model
dout$model[[1]]
coef(dout$model[[1]])
fixef(dout$model[[1]])
dout$model %>%
map(~fixef(.x))
dout$model %>%
map(~fixef(.x)) %>%
bind_rows
dout$model %>%
map(~fixef(.x)) %>%
bind_rows()
dout$model %>%
map(~fixef(.x)) %>%
setNames(dfsim$ID) %>%
bind_rows()
dout$model %>%
map(~fixef(.x)) %>%
setNames(dfsim$ID)
?bind_rows
dout$model %>%
map(~data.frame(fixef(.x))) %>%
setNames(dfsim$ID) %>%
bind_rows()
dfcoef <- dout$model %>%
map(~data.frame(fixef(.x))) %>%
setNames(dfsim$ID) %>%
bind_rows()
head(dfcoef)
dfcoef <- dout$model %>%
map(~data.frame(fixef(.x))) %>%
setNames(dfsim$ID) %>%
bind_rows(.id = "ID")
dfcoef
?fixef
dout$model[[1]]
dout$model[[1]]$model
dout$model[[1]]$fit
dout$model[[1]]$fit$b_Intercept
dout$model[[1]]$fit
str(dout$model[[1]]$fit)
str(dout$model[[1]]$fit,1)
dfcoef <- dout$model %>%
map(~loo(.x)) %>%
setNames(dfsim$ID) %>%
bind_rows(.id = "ID")
loo(dout$model[[1]])
dfcoef <- dout$model %>%
map(~loo(.x[[1]])) %>%
setNames(dfsim$ID) %>%
bind_rows(.id = "ID")
dfcoef <- dout$model %>%
map(~loo(.x)) %>%
setNames(dfsim$ID) %>%
bind_rows(.id = "ID")
dfloo <- dout$model %>%
map(~loo(.x))
dfloo
dfloo[[1]]$estimates
?loo
?loo
dfloo <- dout$model %>%
map(~loo(.x)$estimates[3,]) %>%
setNames(dfsim$ID) %>%
bind_rows(.id = "ID")
dfloo
dfloo <- dout$model %>%
map(~loo(.x)$estimates[3,])
dfloo
setNames(dfloo, dfsim$ID)
setNames(dfloo, dfsim$ID) %>% bind_rows()
setNames(dfloo, dfsim$ID) %>% bind_cols()
setNames(dfloo, dfsim$ID) %>% bind_rows()
setNames(dfloo, dfsim$ID)
class(setNames(dfloo, dfsim$ID))
setNames(dfloo, dfsim$ID)[[1]]
dfloo <- dout$model %>%
map(~loo(.x)$estimates) %>%
setNames(dfsim$ID) %>%
bind_rows(.id = "ID")
dfloo
dfloo
dfloo <- dout$model %>%
map(~loo(.x)$estimates)
dfloo
dfloo[[12]]
class(dfloo[[12]])
dfloo <- dout$model %>%
map(~data.frame(loo(.x)$estimates)) %>%
setNames(dfsim$ID) %>%
bind_rows(.id = "ID")
dfloo
dfloo <- dout$model %>%
map(~data.frame(loo(.x)$estimates[3,])) %>%
setNames(dfsim$ID) %>%
bind_rows(.id = "ID")
dfloo
dfloo <- dout$model %>%
map(~data.frame(loo(.x)$estimates[3,1])) %>%
setNames(dfsim$ID) %>%
bind_rows(.id = "ID")
dfloo
which.min(dfloo$loo..x..estimates.3..1.)
datsim[which.min(dfloo$loo..x..estimates.3..1.),]
dfsim[which.min(dfloo$loo..x..estimates.3..1.),]
dfsim[which.min(dfloo$loo..x..estimates.3..1.),]
dout
dout$model[[1]]
dfsim
dout$model[[2]]
dout$model[[1]]
dout$model[[2]]
dout$model[[2]]$ranef
dout$model[[2]]$family
dout$model[[2]]$fit
dout$model[[2]]$fit %>% class()
data.frame(dout$model[[2]]$fit)
str(dout$model[[2]]$fit)
str(dout$model[[2]]$fit,1)
str(dout$model[[2]]$fit,2)
dout$model[[2]]$fit@model_pars
dout$model[[2]]$fit@mode
dout$model[[2]]$fit
str(dout$model[[2]]$fit,1)
str(dout$model[[2]]$fit,2)
?brm
s1 <- summary(dout$model[[2]])
str(s1, 1)
s1$spec_pars
summary(dout$model[[2]])$spec_pars[1,1]
summary(dout$model[[1]])$spec_pars[1,1]
summary(dout$model[[1]])$spec_pars
dout$family
summary(dout$model[[2]])$spec_pars[1,1]
dout$model[[1]]
class(dout$model[[1]])
class(dout$model[1])
class(dout$model[1][[1]])
dsplots <- dout %>%
group_by(ID) %>%
with_groups({
#Get shape param mean
if (family == "negbinomial"){
shape <- summary(model[[1]])$spec_pars[1,1]
} else {
shape <- NULL
}
resids <- ds_resids(dat$y,
#Note Mean estimate is in col 1 of
#brms predict
predict(model[[1]])[,1],
plot = FALSE,
family = family,
phis = shape)
dsdf <- bind_cols(dat,
fitted = predict(model[[1]])[,1],
resid = resids)
g1 <- ggplot(dsdf) +
aes(x = fitted, y = resid, color = x2) +
geom_point()  +
ggtitle(paste_(form, family, prior))
#save plot to file
# ggsave(g1, file = paste0("figures/model-", ID, ".png"))
list(g1)
})
#' Plot Dunn-Smyth residuals
#'
#' @Usage ds_resids(yobs, ypred, plotds = TRUE,
#' family = "poisson", phis = NULL)
#'
#' @param yobs numeric of observations
#' @param ypred numeric of predictions
#' @param plotds logical, should the residuals be plotted?
#' @param family character for family (poisson, binomial, negbinomial or
#'  nbinom)
#' @param phis scale parameter for nbinom
#'
#' @return A Dunn-Smyth residuals and optionally, a plot of them.
#' @Details Dunn-Smyth residuals are useful when checking for overdisperion or
#' hetergenous variance in count models.  As for normal residual plots, you
#' should look for fanning or evidence of non-linearities.
#' Code is based on that from the boral package (boral::ds.residuals)
#' This function is set-up for Poisson, Binomial and Negative binomial models.
#'
#' @examples
#' data(InsectSprays)
#' m1 <- glm(count ~ spray, family = "poisson", data = InsectSprays)
#' InsectSprays$fit <- predict(m1, type = "response")
#' with(InsectSprays,
#'   ds_resids(count, fit, family = "poisson"))
#' #Looks good
#'
#' library(MASS)
#' m2 <- glm.nb(count ~ spray, data = InsectSprays)
#' InsectSprays$fit2 <- predict(m2, type = "response")
#' with(InsectSprays,
#'   ds_resids(count, fit2, family = "nbinom", phis = 1/m2$theta))
#'  #Ok good, note we need 1/theta to get phi
#'
#' @author Christopher J. Brown
#' @rdname ds_resids
#' @export
ds_resids <- function(yobs, ypred, plotds = TRUE,
family = "poisson",
phis = NULL, trial.size = 1){
if (family == "poisson"){
a <- ppois(yobs - 1, ypred)
b <- ppois(yobs, ypred)
}
if (family %in% c("nbinom", "negbinomial")){
a <- pnbinom(yobs - 1, mu = ypred, size = 1/phis)
b <- pnbinom(yobs, mu = ypred, size = 1/phis)
}
if (family == "binomial") {
a <- pbinom(yobs - 1,
trial.size, prob = ypred)
b <- pbinom(yobs, trial.size,
prob = ypred)
}
u <- runif(n = length(yobs), min = a, max = b)
dsres <- qnorm(u)
if (plotds){
par(mfrow = c(1,2))
plot(ypred, dsres, ylab = "Prediction", xlab = "Dunn-Smyth residual")
abline(h=0)
qqnorm(dsres)
abline(0,1)
}
return(dsres)
}
dsplots <- dout %>%
group_by(ID) %>%
with_groups({
#Get shape param mean
if (family == "negbinomial"){
shape <- summary(model[[1]])$spec_pars[1,1]
} else {
shape <- NULL
}
resids <- ds_resids(dat$y,
#Note Mean estimate is in col 1 of
#brms predict
predict(model[[1]])[,1],
plot = FALSE,
family = family,
phis = shape)
dsdf <- bind_cols(dat,
fitted = predict(model[[1]])[,1],
resid = resids)
g1 <- ggplot(dsdf) +
aes(x = fitted, y = resid, color = x2) +
geom_point()  +
ggtitle(paste_(form, family, prior))
#save plot to file
# ggsave(g1, file = paste0("figures/model-", ID, ".png"))
list(g1)
})
dsplots[[1]]
dsplots[[2]]
dsplots[[3]]
dsplots[[6]]
summary(model[[1]])$spec_pars[1,1]
summary(dout$model[[2]])$spec_pars[1,1]
summary(dout$model[[2]])$spec_pars
?nbinom
?pnbinom
dsplots <- dout %>%
group_by(ID) %>%
with_groups({
#Get shape param mean
if (family == "negbinomial"){
shape <- summary(model[[1]])$spec_pars[1,1]
} else {
shape <- NULL
}
resids <- ds_resids(dat$y,
#Note Mean estimate is in col 1 of
#brms predict
predict(model[[1]])[,1],
plot = FALSE,
family = family,
phis = 1/shape)
dsdf <- bind_cols(dat,
fitted = predict(model[[1]])[,1],
resid = resids)
g1 <- ggplot(dsdf) +
aes(x = fitted, y = resid, color = x2) +
geom_point()  +
ggtitle(paste_(form, family, prior))
#save plot to file
# ggsave(g1, file = paste0("figures/model-", ID, ".png"))
list(g1)
})
dsplots[[6]]
